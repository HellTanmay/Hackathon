import React, { useState } from 'react';

const AptitudeTest = () => {
  const [currentState, setCurrentState] = useState('start'); // 'start', 'loading', 'quiz', 'results', 'error'
  const [questions, setQuestions] = useState([]);
  const [userAnswers, setUserAnswers] = useState({});
  const [results, setResults] = useState(null);
  const [error, setError] = useState(null);

  const startQuiz = async () => {
    setCurrentState('loading');
    setError(null);

    try {
      const response = await fetch('http://localhost:5000/get_aptitude_questions');
      const data = await response.json();

      if (data.error || !response.ok) {
        throw new Error(data.error || 'Failed to load quiz.');
      }

      setQuestions(data);
      setUserAnswers({});
      setCurrentState('quiz');
    } catch (err) {
      console.error('Quiz start error:', err);
      setError(err.message || 'A network error occurred. Please try again.');
      setCurrentState('start');
    }
  };

  const handleAnswerChange = (questionId, value) => {
    setUserAnswers((prev) => ({
      ...prev,
      [questionId]: value,
    }));
  };

  const submitQuiz = async (e) => {
    e.preventDefault();

    // Basic validation: ensure all questions are answered
    const unanswered = questions.some((q) => !userAnswers[q.id]);
    if (unanswered) {
      alert('Please answer all questions before submitting.');
      return;
    }

    try {
      const response = await fetch('http://localhost:5000/submit_answers', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(userAnswers),
      });
      const result = await response.json();

      if (result.error) {
        throw new Error(result.error);
      }

      setResults(result);
      setCurrentState('results');
    } catch (err) {
      console.error('Submit error:', err);
      setError(err.message || 'Failed to submit answers.');
      setCurrentState('quiz');
    }
  };

  const renderStartScreen = () => (
    <div className="flex flex-col items-center space-y-6">
      <div className="text-center max-w-md">
        <p className="text-gray-700 text-lg leading-relaxed">
          Test your problem-solving skills. You will be given 10 multiple-choice questions generated by AI.
        </p>
      </div>
      <button
        type="button"
        onClick={startQuiz}
        className="bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 text-white font-semibold py-3 px-8 rounded-lg shadow-md transition duration-200 transform hover:scale-105 w-full max-w-xs"
      >
        Start Quiz
      </button>
      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-md max-w-md w-full">
          {error}
        </div>
      )}
    </div>
  );

  const renderLoading = () => (
    <div className="flex flex-col items-center justify-center space-y-4">
      <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600"></div>
      <p className="text-gray-700 text-xl font-semibold">Generating your quiz... Please wait.</p>
    </div>
  );

  const renderQuiz = () => (
    <form id="quiz-form" onSubmit={submitQuiz} className="space-y-8">
      {questions.map((q) => (
        <div key={q.id} className="bg-gray-50 p-6 rounded-lg border border-gray-200">
          <h3 className="text-xl font-semibold text-gray-900 mb-6">{q.question}</h3>
          <ul className="space-y-3">
            {q.options.map((option) => (
              <li key={option} className="flex items-center">
                <input
                  type="radio"
                  id={`${q.id}-${option}`}
                  name={q.id}
                  value={option}
                  checked={userAnswers[q.id] === option}
                  onChange={(e) => handleAnswerChange(q.id, e.target.value)}
                  className="h-5 w-5 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                  required
                />
                <label htmlFor={`${q.id}-${option}`} className="ml-3 text-lg text-gray-700 cursor-pointer select-none">
                  {option}
                </label>
              </li>
            ))}
          </ul>
        </div>
      ))}
      <button
        type="submit"
        className="bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 text-white font-semibold py-4 px-6 rounded-lg shadow-lg transition duration-200 transform hover:scale-105 w-full"
      >
        Submit Answers
      </button>
    </form>
  );

  const renderResults = () => (
    <div className="flex flex-col items-center space-y-6 text-center">
      <h2 className="text-3xl font-bold text-gray-900">Quiz Complete! ðŸŽ‰</h2>
      <div className="bg-gradient-to-r from-blue-500 to-purple-600 text-white p-8 rounded-xl shadow-xl">
        <p className="text-4xl font-bold mb-2">Your Final Score: {results.percentage}/100</p>
        <p className="text-xl">({results.score} out of {results.total} correct)</p>
      </div>
      <button
        type="button"
        onClick={() => {
          setCurrentState('start');
          setResults(null);
          setUserAnswers({});
          setQuestions([]);
        }}
        className="bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 text-white font-semibold py-3 px-8 rounded-lg shadow-md transition duration-200 transform hover:scale-105"
      >
        Take Quiz Again
      </button>
    </div>
  );

  return (
    <div className="min-h-screen flex flex-col items-center justify-center bg-gradient-to-br from-gray-50 to-gray-100 py-8 px-4">
      <h1 className="text-4xl font-bold text-gray-900 mb-8 text-center">Aptitude Test</h1>
      <div className="w-full max-w-4xl bg-white p-8 rounded-2xl shadow-xl border border-gray-200">
        {currentState === 'start' && renderStartScreen()}
        {currentState === 'loading' && renderLoading()}
        {currentState === 'quiz' && renderQuiz()}
        {currentState === 'results' && renderResults()}
      </div>
    </div>
  );
};

export default AptitudeTest;
